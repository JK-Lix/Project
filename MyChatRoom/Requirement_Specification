
聊天室的设计与实现
Client端
执行： ./client

请使用配置文件配置自己的监听端口，服务器的监听端口等信息

Server_Ip=192.168.1.40

Server_Port=8731

Clinet_Port=8732

My_Name=xxx

Log_File=./chat.log

假设有A用户想给B用户发送私聊信息，可以发送：@B 这是来自A的私聊信息；

每个用户应该在一个固定的端口${Client_Port}上监听，等待来自其他用户的私聊信息，及公聊信息

为了更好的体验，所有公聊信息，服务器端会转发给Client端

请将Client收到的所有聊天信息，保存在本地的一个文件${Log_File}中

使用tail -f ${Log_File}查看文件，获取实时聊天信息

由服务器发送到本地的数据是一个结构体，请client端自行解析输出

struct Message{  
 char from[20];  
 int flag;//若flag为1则为私聊信息，0为公聊信息，2则为服务器的通知信息  
 char message[1024]; 
};




Server端
执行：./server

请使用配置文件，将服务器监听端口，客户端监听端口等都写到配置文件中

Server_Port=8731

Client_Port=8732

Server将在${Server_POrt}上进行监听，等待用户上线，并在该端口上接收用户输出信息

Server没收到一条消息后，需要将消息转发给其他所有在线的用户

如果用户发送的是一条私聊信息，则此条信息，只转发给目标用户

所有装发给用户的信息都将使用结构体Message进行封装

私聊信息中所指定的用户不存在或已经下线，需通过通知信息告知

请选用合理的数据结构，存储用户信息

支持100个以上的在线用户

在Client上线时，发送欢迎信息，告知当前所有在线人数等

需考虑当两个用户在某一时刻同时上线的情况
